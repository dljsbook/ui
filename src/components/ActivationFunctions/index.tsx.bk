import * as React from 'react';
import Graph from './Graph';
// import styled from 'styled-components';
// import lighten from '../../utils/lighten';
// import { colors, fonts } from '../../config';

interface IProps {
}


enum ACTIVATION_FUNCTION {
  SIGMOID,
  TANH,
  RELU,
  LEAKY_RELU,
}

const FNS: {
  [index: string]: {
    fn: (x: number) => number;
    expr: (x: string) => string;
  }
} = {
  [ACTIVATION_FUNCTION.SIGMOID]: {
    fn: (x: number) => 1 / (1 + Math.exp(-1 * x)),
    expr: x => `1 / (1 + exp(-1 * ${x}))`,
  },
  [ACTIVATION_FUNCTION.TANH]: {
    fn: (x: number) => (Math.exp(2 * x) - 1) / (Math.exp(2 * x) + 1),
    expr: x => `(exp(2 * ${x}) - 1) / (1 + exp(2 * ${x}))`,
  },
  [ACTIVATION_FUNCTION.RELU]: {
    fn: (x: number) => x > 0 ? x : 0,
    expr: x => `${x} > 0 ? ${x} : 0`,
  },
  [ACTIVATION_FUNCTION.LEAKY_RELU]: {
    fn: (x: number) => x > 0 ? x : x * 0.1,
    expr: x => `${x} > 0 ? ${x} : ${x} * 0.1`,
  },
};

interface IState {
  x: number;
  active: null | number;
}

class ActivationFunction extends React.Component<IProps, IState> {
  state: IState = {
    active: null,
    x: 0,
  }

  handleSignalXval = (caller: number) => (_: any, x: number) => {
    if (this.state.active === caller) {
      // console.log('incoming x', x);
      // this.setState({
      //   x,
      // });
    }
  }

  render() {
    return (
      <Graph
        fn={[
          FNS[ACTIVATION_FUNCTION.SIGMOID].fn,
          FNS[ACTIVATION_FUNCTION.RELU].fn,
        ]}
        expr={[
          FNS[ACTIVATION_FUNCTION.SIGMOID].expr,
          FNS[ACTIVATION_FUNCTION.RELU].expr,
        ]}
        interpolate
      />
    );

    // return (
    //   <div style={{ display: 'flex', flexDirection: 'row' }}>
    //     {[
    //       ACTIVATION_FUNCTION.SIGMOID,
    //       ACTIVATION_FUNCTION.TANH,
    //       // ACTIVATION_FUNCTION.RELU,
    //       // ACTIVATION_FUNCTION.LEAKY_RELU,
    //     ].map((key: ACTIVATION_FUNCTION, index: number) => {
    //       const fn = FNS[key];

    //       if (!fn) {
    //         throw new Error('no fn found');
    //       }

    //       console.log(this.state.x, fn.fn(this.state.x));

    //       return (
    //       <div
    //         onMouseOver={() => this.setState({
    //           active: index,
    //         })}
    //       >
    //         <Graph
    //           fn={fn.fn}
    //           expr={fn.expr}
    //           active={this.state.active === index}
    //           x={this.state.x}
    //           y={fn.fn(this.state.x)}
    //           interpolate
    //           onSignalXval={this.handleSignalXval(index)}
    //         />
    //       </div>
    //       );
    //     })}
    //   </div>
    // );
  }

  static render = () => {
    console.log('hithere');
  }
}

        // <Graph value={this.state.value} fn={FNS[ACTIVATION_FUNCTION.TANH]} interpolate />
        // <Graph value={this.state.value} fn={FNS[ACTIVATION_FUNCTION.RELU]} />
        // <Graph value={this.state.value} fn={FNS[ACTIVATION_FUNCTION.LEAKY_RELU]} />
export default ActivationFunction;
