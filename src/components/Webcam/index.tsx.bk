import * as tf from '@tensorflow/tfjs';
import * as React from 'react';

interface IProps {
  width: number;
  height: number;
  // target?: HTMLElement;
}

const MEDIA_PARAMS = {
  audio: false,
  video: {
    facingMode: 'environment',
  },
};

class Webcam extends React.Component<IProps> {
  video: React.RefObject<HTMLVideoElement>;
  resolved: boolean = false;

  static defaultProps = {
    width: 416,
    heiht: 416,
  }

  constructor(props: IProps) {
    super(props);
    this.video = React.createRef();
  }

  capture = () => tf.tidy(() => {
    if (!this.video || !this.video.current) {
      throw new Error('capture called prior to video availability')
    }
    const pixels = tf.fromPixels(this.video.current);
    const croppedImage = this.cropImage(pixels);
    return croppedImage.expandDims(0).toFloat().div(tf.scalar(255));
  });

  cropImage(img: tf.Tensor3D) {
    const size = Math.min(img.shape[0], img.shape[1]);
    const centerHeight = img.shape[0] / 2;
    const startHeight = centerHeight - (size / 2);
    const centerWidth = img.shape[1] / 2;
    const startWidth = centerWidth - (size / 2);
    return img.slice([startHeight, startWidth, 0], [size, size, 3]);
  }

  setup = () => new Promise(async (resolve, reject) => {
    if (this.resolved) {
      return resolve();
    }

    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      reject('Your browser does not support webcams or webcam could not be found');
    }

    if (!this.video || !this.video.current) {
      throw new Error('capture called prior to video availability')
    }

    this.video.current.srcObject = await navigator.mediaDevices.getUserMedia(MEDIA_PARAMS);
    this.video.current.onloadedmetadata = () => {
      this.resolved = true;
      resolve();
    };
  });

  draw = ({
    top,
    left,
    bottom,
    right,
    classProb,
    className,
  }: any) => {
    console.log('who am i', className, classProb, top, left, bottom, right);
  }

  // getRef = (video: HTMLVideoElement) => {
  //   if (!this.video) {
  //   this.video = video;
  //   // this.canvas = document.createElement('canvas');
  //   // (target || document.body).appendChild(this.video);

  //   this.setup();
  //   }
  // }

  render() {
    const {
      width,
      height,
    } = this.props;

    return (
      <video
        width={width}
        height={height}
        autoplay={true}
        ref={this.video}
      />
    );
  }
}

export default Webcam;
